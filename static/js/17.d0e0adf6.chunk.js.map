{"version":3,"sources":["components/About/About.tsx","components/JobPostDetailWidget/JobPostDetailWidget.tsx","pages/Candidate/CandidateJobDetail/CandidateJobDetail.tsx"],"names":["About","children","title","split","map","itm","index","connect","state","searchType","dispatch","bindActionCreators","applyForJob","fetchSearchJobDetail","props","jobTitle","skills","jobLocation","ctc","exp","jobDescription","companyName","jobslug","mappableSkills","useEffect","className","type","onClick","style","iconStyles","activeJob","fetchJobDetail","match","useRouteMatch","params","slug","Object","keys","length","JobPostDetailWidget"],"mappings":"2KAmBeA,EAhByB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACnD,OACE,qCACE,6BACE,4BAAIA,MAFR,OAIGD,QAJH,IAIGA,OAJH,EAIGA,EAAUE,MAAM,SAASC,KAAI,SAACC,EAAaC,GAAd,OAC5B,iCACGD,EACD,yBAFF,UAAcA,EAAd,YAAqBC,Y,0LCwFdC,eAbS,SAACC,GAAD,MAAwB,CAC9CC,WAAYD,EAAMC,eAGO,SAACC,GAAD,OACzBC,YACE,CACEC,gBACAC,0BAEFH,KAGWH,EAvF4B,SAACO,GAC1C,IACEC,EAWED,EAXFC,SACAC,EAUEF,EAVFE,OACAC,EASEH,EATFG,YACAC,EAQEJ,EARFI,IACAC,EAOEL,EAPFK,IACAV,EAMEK,EANFL,WACAW,EAKEN,EALFM,eACAC,EAIEP,EAJFO,YACAT,EAGEE,EAHFF,YACAU,EAEER,EAFFQ,QACAT,EACEC,EADFD,qBAEIU,EACc,kBAAXP,EAAsBA,EAAOb,MAAM,KAAOa,EAkBnD,OAZAQ,qBAAU,WACHJ,GACHP,EAAqBS,KAEtB,IAEHE,qBAAU,WACHJ,GACHP,EAAqBS,KAEtB,CAACA,EAASb,IAGX,qBAAKgB,UAAU,4BAAf,SACE,eAAC,IAAD,WACE,0BAASA,UAAU,cAAnB,UACE,sBAAKA,UAAU,gBAAf,UACE,6BAAKV,IACL,+BAAOM,OAET,qBAAKI,UAAU,iBAAf,SACE,cAAC,IAAD,CAAQC,KAAK,UAAUC,QAzBb,WAClBL,GAAWV,EAAYU,IAwBf,wBAKJ,yBAASG,UAAU,eAAnB,SACGF,EAAenB,KAAI,SAACC,GAAD,OAClB,sBAAMoB,UAAU,OAAhB,SACGpB,GADyBA,QAKhC,0BAASoB,UAAU,iBAAnB,UACE,gCACE,cAAC,IAAD,CAAcG,MAAOC,MACpBZ,KAEH,sBAAKf,MAAK,UAAKgB,EAAL,mBAAV,UACE,cAAC,IAAD,CAAkBU,MAAOC,MACxBX,EAFH,UAIA,gCACE,cAAC,IAAD,CAAWU,MAAOC,MACjBV,EAFH,cAKF,cAACnB,EAAA,EAAD,CAAOE,MAAM,gBAAb,SAA8BkB,a,iLCxCvBb,eAZS,SAACC,GAAD,MAAwB,CAC9CsB,UAAWtB,EAAMsB,cAGQ,SAACpB,GAAD,OACzBC,YACE,CACEoB,oBAEFrB,KAGWH,EA7BmD,SAACO,GACjE,IAAQgB,EAA8BhB,EAA9BgB,UAAWC,EAAmBjB,EAAnBiB,eACbC,EAAaC,cAMnB,OAJAT,qBAAU,WACRO,EAAeC,EAAME,OAAOC,QAC3B,IAGD,qBAAKV,UAAU,mBAAf,SACGW,OAAOC,KAAKP,GAAWQ,OAAS,GAC/B,cAACC,EAAA,EAAD,8BAA8BT","file":"static/js/17.d0e0adf6.chunk.js","sourcesContent":["import React from \"react\";\nimport { AboutPropTypes } from \".\";\n\nconst About: React.FC<AboutPropTypes> = ({ children, title }) => {\n  return (\n    <>\n      <h3>\n        <b>{title}</b>\n      </h3>\n      {children?.split(/[\\n]+/).map((itm: string, index: number) => (\n        <span key={`${itm}-${index}`}>\n          {itm}\n          <br />\n        </span>\n      ))}\n    </>\n  );\n};\n\nexport default About;\n","import React, { useEffect } from \"react\";\nimport { Card, Button } from \"antd\";\nimport { MdLocationOn, MdMonetizationOn, MdHistory } from \"react-icons/md\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport About from \"../About\";\nimport { iconStyles } from \"../../utils\";\nimport { StateTypes, fetchSearchJobDetail, applyForJob } from \"../../redux\";\nimport \"./JobPostDetailWidget.scss\";\n\nconst JobPostDetailWidget: React.FC<any> = (props) => {\n  const {\n    jobTitle,\n    skills,\n    jobLocation,\n    ctc,\n    exp,\n    searchType,\n    jobDescription,\n    companyName,\n    applyForJob,\n    jobslug,\n    fetchSearchJobDetail,\n  } = props;\n  const mappableSkills =\n    typeof skills === \"string\" ? skills.split(\",\") : skills;\n\n  const handleApply = () => {\n    jobslug && applyForJob(jobslug);\n  };\n\n  useEffect(() => {\n    if (!jobDescription) {\n      fetchSearchJobDetail(jobslug);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!jobDescription) {\n      fetchSearchJobDetail(jobslug);\n    }\n  }, [jobslug, searchType]);\n\n  return (\n    <div className=\"job-posting-detail-widget\">\n      <Card>\n        <section className=\"each-widget\">\n          <div className=\"right-section\">\n            <h3>{jobTitle}</h3>\n            <span>{companyName}</span>\n          </div>\n          <div className=\"action-buttons\">\n            <Button type=\"primary\" onClick={handleApply}>\n              Apply\n            </Button>\n          </div>\n        </section>\n        <section className=\"tags-section\">\n          {mappableSkills.map((itm: string) => (\n            <span className=\"tags\" key={itm}>\n              {itm}\n            </span>\n          ))}\n        </section>\n        <section className=\"footer-section\">\n          <div>\n            <MdLocationOn style={iconStyles} />\n            {jobLocation}\n          </div>\n          <div title={`${ctc} lacs per annum`}>\n            <MdMonetizationOn style={iconStyles} />\n            {ctc} LPA\n          </div>\n          <div>\n            <MdHistory style={iconStyles} />\n            {exp} year\n          </div>\n        </section>\n        <About title=\"About the job\">{jobDescription}</About>\n      </Card>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: StateTypes) => ({\n  searchType: state.searchType,\n});\n\nconst mapDispatchToProps = (dispatch: any) =>\n  bindActionCreators(\n    {\n      applyForJob,\n      fetchSearchJobDetail,\n    },\n    dispatch\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(JobPostDetailWidget);\n","import React, { useEffect } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { useRouteMatch } from \"react-router\";\n\nimport JobPostDetailWidget from \"../../../components/JobPostDetailWidget\";\nimport { StateTypes, fetchJobDetail } from \"../../../redux\";\nimport { CandidateJobDetailPropTypes } from \".\";\nimport \"./CandidateJobDetail.scss\";\n\nconst CandidateJobDetail: React.FC<CandidateJobDetailPropTypes> = (props) => {\n  const { activeJob, fetchJobDetail } = props;\n  const match: any = useRouteMatch();\n\n  useEffect(() => {\n    fetchJobDetail(match.params.slug);\n  }, []);\n\n  return (\n    <div className=\"candidate-detail\">\n      {Object.keys(activeJob).length > 0 && (\n        <JobPostDetailWidget {...{ ...activeJob }} />\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: StateTypes) => ({\n  activeJob: state.activeJob,\n});\n\nconst mapDispatchToProps = (dispatch: any) =>\n  bindActionCreators(\n    {\n      fetchJobDetail,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CandidateJobDetail);\n"],"sourceRoot":""}