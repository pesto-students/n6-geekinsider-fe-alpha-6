{"version":3,"sources":["pages/Login/Login.tsx"],"names":["connect","state","userType","dispatch","bindActionCreators","setUserType","setIsAuth","setLoading","props","useState","loginLoading","setLoginLoading","history","useHistory","signIn","user","pass","makeRequest","auth","email","password","result","signInFunc","values","username","resp","errors","notification","error","message","type","role","localStorage","setItem","token","JSON","stringify","push","code","visible","maskClosable","closable","bodyStyle","padding","width","footer","centered","onFinish","initialValues","Item","name","rules","required","prefix","UserOutlined","className","placeholder","Password","LockOutlined","htmlType","block","loading","onClick"],"mappings":"0VAgJeA,eAdS,SAACC,GAAD,MAAwB,CAC9CC,SAAUD,EAAMC,aAGS,SAACC,GAAD,OACzBC,YACE,CACEC,gBACAC,cACAC,gBAEFJ,KAGWH,EAlI0B,SAACQ,GACxC,IAAQH,EAA2BG,EAA3BH,YAAaC,EAAcE,EAAdF,UACrB,EAAwCG,oBAAkB,GAA1D,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAUC,cAEVC,EAAM,iDAAG,WAAOC,EAAcC,GAArB,iGACQC,IAAYC,KAAK,SAAU,CAC9CC,MAAOJ,EACPK,SAAUJ,IAHC,cACPK,EADO,yBAKNA,GALM,2CAAH,wDAQNC,EAAU,iDAAG,WAAOC,GAAP,gGACTC,EAAuBD,EAAvBC,SAAUJ,EAAaG,EAAbH,SADD,SAGfT,GAAgB,GAHD,SAIIG,EAAOU,EAAUJ,GAJrB,kBAITK,EAJS,kBAKXA,MAAMC,OALK,wBAMbf,GAAgB,GAChBgB,IAAaC,MAAM,CACjBC,QAAO,UAAEJ,EAAKC,cAAP,aAAE,EAAaG,UARX,2BAYTC,EACe,kBAAnBL,EAAKV,KAAKgB,KAA2B,YAAc,YACrD1B,EAAYyB,GACZxB,GAAU,GACV0B,aAAaC,QAAQ,eAAgBR,EAAKS,OAC1CF,aAAaC,QAAQ,OAAQE,KAAKC,UAAUX,EAAKV,OACjDJ,GAAgB,GAChBC,EAAQyB,KAAK,SAnBE,kDAqBf1B,GAAgB,GACA,2BAAZ,uCAAG2B,OACLX,IAAaC,MAAM,CACjBC,QAAO,OAAC,EAAD,yBAAE,KAAGA,UAxBD,0DAAH,sDAwChB,OACE,cAAC,IAAD,CACEU,SAAS,EACTC,cAAc,EACdC,UAAU,EACVC,UAAW,CAAEC,QAAS,QACtBC,MAAM,QACNC,OAAQ,KACRC,UAAQ,EAPV,SASE,eAAC,IAAD,CACEC,SAhBwB,SAACxB,GAC7BD,EAAWC,GACXlB,EAAY,cAeR2C,cAAe,CACbxB,SAAU,+BACVJ,SAAU,YAJd,UAOE,cAAC,IAAK6B,KAAN,CACEC,KAAK,WACLC,MAAO,CACL,CACEC,UAAU,EACVvB,QAAS,8BACTC,KAAM,UANZ,SAUE,cAAC,IAAD,CACEuB,OAAQ,cAACC,EAAA,EAAD,CAAcC,UAAU,wBAChCC,YAAY,YAGhB,cAAC,IAAKP,KAAN,CACEC,KAAK,WACLC,MAAO,CAAC,CAAEC,UAAU,EAAMvB,QAAS,gCAFrC,SAIE,cAAC,IAAM4B,SAAP,CACEJ,OAAQ,cAACK,EAAA,EAAD,CAAcH,UAAU,wBAChCC,YAAY,eAGhB,cAAC,IAAKP,KAAN,UACE,cAAC,IAAD,CAAQnB,KAAK,UAAU6B,SAAS,SAASC,OAAK,EAACC,QAASnD,EAAxD,qBASF,cAAC,IAAKuC,KAAN,UACE,qBAAKM,UAAU,oBAAf,SACE,cAAC,IAAD,CAAQzB,KAAK,OAAOgC,QA/DA,kBAAMlD,EAAQyB,KAAK,YA+DvC","file":"static/js/27.534d3499.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Input, Button, Modal, notification } from \"antd\";\nimport axios from \"axios\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\n// import { CognitoHostedUIIdentityProvider } from \"@aws-amplify/auth/lib/types\";\n\nimport { setUserType, StateTypes, setIsAuth, setLoading } from \"../../redux\";\nimport { LoginPropsTypes, LoginFormSubmitTypes } from \"./types\";\nimport \"./Login.scss\";\nimport makeRequest from \"../../utils/makeRequest\";\n\nconst Login: React.FC<LoginPropsTypes> = (props) => {\n  const { setUserType, setIsAuth } = props;\n  const [loginLoading, setLoginLoading] = useState<boolean>(false);\n  const history = useHistory();\n\n  const signIn = async (user: string, pass: string) => {\n    const result = await makeRequest.auth(\"signin\", {\n      email: user,\n      password: pass,\n    });\n    return result;\n  };\n\n  const signInFunc = async (values: LoginFormSubmitTypes) => {\n    const { username, password } = values;\n    try {\n      setLoginLoading(true);\n      const resp = await signIn(username, password);\n      if (resp?.errors) {\n        setLoginLoading(false);\n        notification.error({\n          message: resp.errors?.message,\n        });\n        return;\n      }\n      const type =\n        resp.user.role === \"userCandidate\" ? \"candidate\" : \"recruiter\";\n      setUserType(type);\n      setIsAuth(true);\n      localStorage.setItem(\"access_token\", resp.token);\n      localStorage.setItem(\"user\", JSON.stringify(resp.user));\n      setLoginLoading(false);\n      history.push(\"/home\");\n    } catch (e: any) {\n      setLoginLoading(false);\n      if (e?.code === \"UserNotFoundException\") {\n        notification.error({\n          message: e?.message,\n        });\n      }\n    }\n  };\n\n  const setSignUpModalVisible = () => history.push(\"/signup\");\n\n  // const signInWithGoogle = () =>\n  //   Auth.federatedSignIn({ provider: CognitoHostedUIIdentityProvider.Google });\n\n  const handleCandidateSubmit = (values: LoginFormSubmitTypes) => {\n    signInFunc(values);\n    setUserType(\"candidate\");\n  };\n\n  return (\n    <Modal\n      visible={true}\n      maskClosable={false}\n      closable={false}\n      bodyStyle={{ padding: \"40px\" }}\n      width=\"420px\"\n      footer={null}\n      centered\n    >\n      <Form\n        onFinish={handleCandidateSubmit}\n        initialValues={{\n          username: \"itvxqzahzcuhxrhete@uivvn.net\",\n          password: \"pass@123\",\n        }}\n      >\n        <Form.Item\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your username!\",\n              type: \"email\",\n            },\n          ]}\n        >\n          <Input\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Email\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Password\"\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" block loading={loginLoading}>\n            Login\n          </Button>\n        </Form.Item>\n        {/* <Form.Item>\n          <Button htmlType=\"submit\" block onClick={signInWithGoogle}>\n            Sign in with Google\n          </Button>\n        </Form.Item> */}\n        <Form.Item>\n          <div className=\"login__otherlinks\">\n            <Button type=\"link\" onClick={setSignUpModalVisible}>\n              Register\n            </Button>\n          </div>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (state: StateTypes) => ({\n  userType: state.userType,\n});\n\nconst mapDispatchToProps = (dispatch: any) =>\n  bindActionCreators(\n    {\n      setUserType,\n      setIsAuth,\n      setLoading,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"],"sourceRoot":""}