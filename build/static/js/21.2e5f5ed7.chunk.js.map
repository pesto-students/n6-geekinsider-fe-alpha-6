{"version":3,"sources":["components/About/About.tsx","components/JobPostDetailWidget/JobPostDetailWidget.tsx","pages/Candidate/CandidateJobDetail/CandidateJobDetail.tsx"],"names":["About","children","title","split","map","itm","connect","state","dispatch","bindActionCreators","applyForJob","props","useHistory","jobTitle","skills","jobLocation","ctc","exp","jobDescription","numberOfApplications","companyName","jobslug","mappableSkills","className","type","onClick","style","iconStyles","activeJob","fetchJobDetail","match","candidateDetail","useEffect","params","slug","Object","keys","length","JobPostDetailWidget"],"mappings":"4KAaeA,EATyB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACjD,OACI,qCACI,6BAAI,4BAAIA,MADZ,OAEKD,QAFL,IAEKA,OAFL,EAEKA,EAAUE,MAAM,MAAMC,KAAI,SAACC,GAAD,OAAiB,iCAAiBA,EAAI,yBAAVA,W,iMCmDpDC,eANS,SAACC,GAAD,MAAwB,MAErB,SAACC,GAAD,OAAmBC,YAAmB,CAC7DC,iBACDF,KAEYF,EA5C4B,SAACK,GACxBC,cAAhB,IACQC,EAAqHF,EAArHE,SAAUC,EAA2GH,EAA3GG,OAAQC,EAAmGJ,EAAnGI,YAAaC,EAAsFL,EAAtFK,IAAKC,EAAiFN,EAAjFM,IAA2BC,GAAsDP,EAA5EQ,qBAA4ER,EAAtDO,gBAAgBE,EAAsCT,EAAtCS,YAAaV,EAAyBC,EAAzBD,YAAaW,EAAYV,EAAZU,QAC3GC,EAAmC,kBAAXR,EAAsBA,EAAOX,MAAM,KAAOW,EAMxE,OACI,qBAAKS,UAAU,4BAAf,SACI,eAAC,IAAD,WACI,0BAASA,UAAU,cAAnB,UAEI,sBAAKA,UAAU,gBAAf,UACI,6BAAKV,IACL,+BAAOO,OAGX,qBAAKG,UAAU,iBAAf,SACI,cAAC,IAAD,CAAQC,KAAK,UAAUC,QAfvB,WAChBJ,GAAWX,EAAYW,IAcP,wBAIR,yBAASE,UAAU,eAAnB,SACKD,EAAelB,KAAI,SAACC,GAAD,OAAiB,sBAAMkB,UAAU,OAAhB,SAAkClB,GAANA,QAErE,0BAASkB,UAAU,iBAAnB,UACI,gCAAK,cAAC,IAAD,CAAcG,MAAOC,MAAeZ,KACzC,sBAAKb,MAAK,UAAKc,EAAL,mBAAV,UAAqC,cAAC,IAAD,CAAkBU,MAAOC,MAAeX,EAA7E,UACA,gCAAK,cAAC,IAAD,CAAWU,MAAOC,MAAeV,EAAtC,cAEJ,cAACjB,EAAA,EAAD,CAAOE,MAAM,gBAAb,SAA8BgB,a,2KChB/BZ,eARS,SAACC,GAAD,MAAwB,CAC5CqB,UAAWrB,EAAMqB,cAGM,SAACpB,GAAD,OAAmBC,YAAmB,CAC7DoB,oBACDrB,KAEYF,EAtBmD,SAACK,GAC/D,IAAQiB,EAAsDjB,EAAtDiB,UAAWE,EAA2CnB,EAA3CmB,MAAwBD,GAAmBlB,EAApCoB,gBAAoCpB,EAAnBkB,gBAM3C,OAJAG,qBAAU,WACNH,EAAeC,EAAMG,OAAOC,QAC7B,IAGC,qBAAKX,UAAU,mBAAf,SACKY,OAAOC,KAAKR,GAAWS,OAAO,GAAK,cAACC,EAAA,EAAD,8BAA6BV","file":"static/js/21.2e5f5ed7.chunk.js","sourcesContent":["import React from 'react';\nimport { Card } from 'antd';\nimport { AboutPropTypes } from '.';\n\nconst About: React.FC<AboutPropTypes> = ({ children, title }) => {\n    return (\n        <>\n            <h3><b>{title}</b></h3>\n            {children?.split('\\n').map((itm: string) => <span key={itm}>{itm}<br/></span>)}\n        </>\n    )\n}\n\nexport default About;","import React from 'react';\nimport { Card, Button, Avatar } from 'antd';\nimport { MdLocationOn, MdMonetizationOn, MdHistory } from \"react-icons/md\";\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { applyForJob } from '../../redux/actions';\nimport { iconStyles } from '../../utils';\nimport { StateTypes } from '../../redux';\nimport { useHistory } from 'react-router';\nimport { JobPostDetailWidgetPropTypes } from './types';\nimport './JobPostDetailWidget.scss';\nimport About from '../About';\n\n// const JobPostDetailWidget: React.FC<JobPostDetailWidgetPropTypes> = (props) => {\nconst JobPostDetailWidget: React.FC<any> = (props) => {\n    const history = useHistory();\n    const { jobTitle, skills, jobLocation, ctc, exp, numberOfApplications, jobDescription, companyName, applyForJob, jobslug } = props;\n    const mappableSkills = typeof skills === 'string' ? skills.split(',') : skills;\n\n    const handleApply = () => {\n        jobslug && applyForJob(jobslug);\n    }\n    \n    return (\n        <div className=\"job-posting-detail-widget\">\n            <Card>\n                <section className=\"each-widget\">\n                    {/* <Avatar size={75}>{companyName[0]}</Avatar> */}\n                    <div className=\"right-section\">\n                        <h3>{jobTitle}</h3>\n                        <span>{companyName}</span>\n                        {/* <a>{numberOfApplications} applicants</a> */}\n                    </div>\n                    <div className=\"action-buttons\">\n                        <Button type=\"primary\" onClick={handleApply}>Apply</Button>\n                        {/* <Button type=\"primary\">Company details</Button> */}\n                    </div>\n                </section>  \n                <section className=\"tags-section\">\n                    {mappableSkills.map((itm: string) => <span className=\"tags\" key={itm}>{itm}</span>)}\n                </section>\n                <section className=\"footer-section\">\n                    <div><MdLocationOn style={iconStyles} />{jobLocation}</div>\n                    <div title={`${ctc} lacs per annum`}><MdMonetizationOn style={iconStyles} />{ctc} LPA</div>\n                    <div><MdHistory style={iconStyles} />{exp} year</div>\n                </section>\n                <About title=\"About the job\">{jobDescription}</About>\n            </Card>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: StateTypes) => ({});\n  \nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({\n    applyForJob\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobPostDetailWidget);","import React, { useEffect } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport JobPostDetailWidget from '../../../components/JobPostDetailWidget';\nimport { StateTypes, fetchJobDetail } from '../../../redux';\nimport { CandidateJobDetailPropTypes } from '.';\nimport './CandidateJobDetail.scss';\n\nconst CandidateJobDetail: React.FC<CandidateJobDetailPropTypes> = (props) => {\n    const { activeJob, match, candidateDetail, fetchJobDetail } = props;\n\n    useEffect(() => {\n        fetchJobDetail(match.params.slug);\n    }, [])\n    \n    return (\n        <div className=\"candidate-detail\">\n            {Object.keys(activeJob).length>0 && <JobPostDetailWidget {...{...activeJob}} />}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: StateTypes) => ({\n    activeJob: state.activeJob\n});\n\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({\n    fetchJobDetail\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CandidateJobDetail);"],"sourceRoot":""}